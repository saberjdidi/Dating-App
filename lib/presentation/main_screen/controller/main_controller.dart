import 'dart:async';

import 'package:dating_app_bilhalal/core/app_export.dart';
import 'package:dating_app_bilhalal/core/utils/popups/search_dating.dart';
import 'package:dating_app_bilhalal/data/models/UserModel.dart';
import 'package:dating_app_bilhalal/data/models/country_model.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_card_swiper/flutter_card_swiper.dart';

class MainController extends GetxController {
  static MainController get instance => Get.find();

  final RxList<UserModel> users = <UserModel>[].obs;
  var selectedCountries = <String>[].obs;

  @override
  void onInit() {
    super.onInit();
    loadUsers();
    // D√©marre le swipe automatique apr√®s un petit d√©lai
    Future.delayed(const Duration(seconds: 2), startAutoSwipe);
  }

/*
  @override
  void onReady() {
    super.onReady();
    Future.delayed(const Duration(milliseconds: 300), (){
      SearchDating.openDialogFilterByPays(instance);
    });
  } */

  void loadUsers() {
    users.value = [
      UserModel(
        imageProfile: ImageConstant.imgOnBoarding1,
        fullName: 'ŸÜŸàÿ±ÿß ÿÆÿßŸÑÿØ',
        age: 25,
        bio: 'üåçüì∏ ŸÜŸÖŸàÿ∞ÿ¨ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä',
        isFavoris: true,
        interests: ["ÿßŸÑÿ™ÿ≥ŸàŸÇ", "ŸÅŸàÿ™Ÿàÿ∫ÿ±ÿßŸÅŸäÿß", "ÿßŸÑŸäŸàÿ∫ÿß"],
        images: [ImageConstant.profile1, ImageConstant.profile2, ImageConstant.profile3, ImageConstant.profile4, ImageConstant.profile5, ImageConstant.profile6, ImageConstant.profile7]
      ),
      UserModel(
        imageProfile: ImageConstant.imgOnBoarding2,
        fullName: 'ŸÜŸàÿ±ÿß ÿÆÿßŸÑÿØ',
        age: 32,
        bio: 'ŸÖÿ®ÿ±ŸÖÿ¨',
          isFavoris: true,
        interests: ["ŸÉÿßÿ±ŸäŸàŸÉŸä", "ÿßŸÑÿ™ŸÜÿ≥", "ÿßŸÑŸäŸàÿ∫ÿß", "ÿ∑ÿ®ÿÆ", "ÿ≥ÿ®ÿßÿ≠ÿ©"],
          images: [ImageConstant.profile1, ImageConstant.profile2, ImageConstant.profile3, ImageConstant.profile4, ImageConstant.profile5, ImageConstant.profile6, ImageConstant.profile7]
      ),
      UserModel(
        imageProfile: ImageConstant.imgOnBoarding3,
        fullName: 'ÿßŸäŸÑÿßŸÅ ÿÆÿßŸÑÿØ',
        age: 29,
        bio: 'ÿ¥ÿÆÿµ ÿ•ÿπŸÑÿßŸÖŸä',
          isFavoris: false,
        interests: ["ÿ±ŸÉÿ∂", "ÿßŸÑÿ≥ŸÅÿ±", "ŸÇÿ±ÿßÿ°ÿ©", "ÿ∑ÿ®ÿÆ", "ÿ≥ÿ®ÿßÿ≠ÿ©"],
        images: [ImageConstant.profile1, ImageConstant.profile2, ImageConstant.profile3, ImageConstant.profile4, ImageConstant.profile5, ImageConstant.profile6, ImageConstant.profile7]
      ),
    ];
  }

  /* toggleCountry(String countryName) {
    if (selectedCountries.contains(countryName)) {
      selectedCountries.remove(countryName);
    } else {
      selectedCountries.add(countryName);
    }
  } */
  /// S√©lectionne / d√©s√©lectionne un pays
  void toggleCountry(String countryName) {
    // Si on clique sur "ÿßŸÑ⁄©ŸÑ"
    if (countryName == "ÿßŸÑ⁄©ŸÑ") {
      if (selectedCountries.contains("ÿßŸÑ⁄©ŸÑ")) {
        // Si "ÿßŸÑ⁄©ŸÑ" est d√©j√† s√©lectionn√© ‚Üí tout d√©s√©lectionner
        selectedCountries.clear();
      } else {
        // Si on s√©lectionne "ÿßŸÑ⁄©ŸÑ" ‚Üí tout s√©lectionner
        selectedCountries.assignAll(countriesList.map((c) => c.name).toList());
      }
    } else {
      // Si on clique sur un autre pays
      if (selectedCountries.contains(countryName)) {
        // On d√©s√©lectionne ce pays
        selectedCountries.remove(countryName);
        // Si "ÿßŸÑ⁄©ŸÑ" √©tait s√©lectionn√© ‚Üí on le retire
        selectedCountries.remove("ÿßŸÑ⁄©ŸÑ");
      } else {
        // On ajoute le pays
        selectedCountries.add(countryName);
        // Si tous les pays sont s√©lectionn√©s ‚Üí on coche "ÿßŸÑ⁄©ŸÑ"
        if (selectedCountries.length == countriesList.length - 1 &&
            !selectedCountries.contains("ÿßŸÑ⁄©ŸÑ")) {
          selectedCountries.add("ÿßŸÑ⁄©ŸÑ");
        }
      }
    }
  }

  //titre qui sera affich√© dans la bottom navigation bar
  var selectedCountryTitle = "ÿßŸÑ⁄©ŸÑ".obs;
  //Mettre √† jour le titre affich√© dans le bottom bar
  updateCountryTitle(){
      if(selectedCountries.isEmpty){
        selectedCountryTitle.value = "ÿßŸÑ⁄©ŸÑ";
      } else if(selectedCountries.length == 1){
        selectedCountryTitle.value = selectedCountries.first;
      } else {
        selectedCountryTitle.value = "ÿπÿØÿ© ÿØŸàŸÑ";
      }
      debugPrint('selectedCountryTitle : ${selectedCountryTitle.value}');
  }

  ///LinearProgressIndicator Start
  final CardSwiperController swiperController = CardSwiperController();
  final RxDouble progress = 0.0.obs;
  //Timer? autoSwipeTimer;
  Timer? progressTimer;
  void startAutoSwipe() {
    stopAutoSwipe();

    const swipeInterval = Duration(seconds: 10);
    const tickInterval = Duration(milliseconds: 100);
    const totalTicks = 10000 ~/ 100; // 10s -> 100 ticks

    int tickCount = 0;
    progress.value = 0;

    progressTimer = Timer.periodic(tickInterval, (timer) {
      tickCount++;
      progress.value = tickCount / totalTicks;
      if (tickCount >= totalTicks) {
        timer.cancel();
        swiperController.swipe(CardSwiperDirection.right);
        startAutoSwipe(); // relance le cycle automatiquement
      }
    });
  }

  //without progress timer
  /* void startAutoSwipe() {
    // üîÅ Swipe automatique toutes les 10 secondes
    autoSwipeTimer = Timer.periodic(const Duration(seconds: 8), (timer) {
      swiperController.swipe(CardSwiperDirection.right);
    });
  } */

  void stopAutoSwipe() {
    //autoSwipeTimer?.cancel();
    progressTimer?.cancel(); //if add progess timer
  }

  /// üîÅ Appel√© apr√®s chaque swipe (manuel ou auto)
  void onSwipe() {
    stopAutoSwipe();
    startAutoSwipe();
  }

  @override
  void onClose() {
    stopAutoSwipe();
    super.onClose();
  }
///LinearProgressIndicator End
}
