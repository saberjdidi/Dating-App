import 'package:dating_app_bilhalal/core/app_export.dart';
import 'package:flutter/material.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  var _appTheme = 'light';
  //var _appTheme = PrefUtils.getTheme();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'dark': PrimaryColors(),
    'light': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'dark': ColorSchemes.primaryColorScheme,
    'light' : ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
 /* void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    _appTheme = _newTheme; // Add this line to update _appTheme
    Get.forceAppUpdate();
  } */

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getDarkTheme() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      useMaterial3: true,
      fontFamily: 'Cairo',
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      brightness: Brightness.light,
      //textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: TColors.dark,
      //scaffoldBackgroundColor: colorScheme.onPrimary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(27.hw),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 2.hw,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(19.hw),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray700,
      ),
    );
  }

  ///Light Theme
  ThemeData _getLightTheme() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      useMaterial3: true,
      fontFamily: 'Cairo',
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      //textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: TColors.white,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(27.hw),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 2.hw,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(19.hw),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return TColors.blueLight700;
            //return colorScheme.primary;
          }
          return colorScheme.primary;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray700,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  ThemeData getCurrentTheme() {
    final theme = PrefUtils.getTheme(); // safe : renvoie 'light' par dÃ©faut
    return theme == 'dark' ? getDarkTheme() : getLightTheme();
    //return getLightTheme();
  /*  if (_appTheme == 'dark') {
      return getDarkTheme();
    } else if (_appTheme == 'light') {
      return getLightTheme();
    } else {
      // Default to dark theme if the current theme is not recognized
      return getDarkTheme();
    } */
  }


  ThemeData getDarkTheme() => _getDarkTheme();

  ThemeData getLightTheme() => _getLightTheme();

  ThemeData themeData() => _getDarkTheme();
//ThemeData themeData() => _getLightTheme();
}


/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0xE6FCFCFF),//Color(0XFF1AADB6),
    primaryContainer: Color(0xE6FCFCFF),//Color(0X8F282828),

    // Error colors
    errorContainer: Color(0XFFEB4335),
    onError: Color(0XFF919999),
    onErrorContainer: Color(0XFF0E1010),

    // On colors(text colors)
    onPrimary: Color(0xE6FCFCFF),//Color(0XFF181A20),
    onPrimaryContainer: Color(0xE6FCFCFF),//Color(0XFFE7E9E9),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  //primary color
  Color get primaryColor => Color(0XFF181A20);
  // Blackc
  Color get black9000c => Color(0X0C04060F);
  Color get black45 => Colors.black45;
  Color get black54 => Colors.black54;
  Color get black => Colors.black;

  // Blue
  Color get blueAstree => Color(0XFF011689);
  Color get blueA400 => Color(0XFF1877F2);
  Color get blueMarine => Color(0X101086E6);

  // BlueGray
  Color get blueGray100 => Color(0XFFC8CCCC);
  Color get blueGray900 => Color(0XFF31343B);
  Color get blueGray90059 => Color(0X59353535);
  Color get blueGray90076 => Color(0X762E2E2E);

  // Cyan
  Color get cyan200 => Color(0XFF7BE6EC);
  Color get cyan300 => Color(0XFF46DBE5);
  Color get cyan500 => Color(0XFF00BCD3);
  Color get cyan600 => Color(0XFF3ca2b3);
  Color get cyan900 => Color(0XFF0F656A);

  // Gray
  Color get gray400 => Color(0XFFB8BDBD);
  Color get gray40001 => Color(0XFFB0B6B6);
  Color get gray50 => Color(0XFFFBFBFB);
  Color get gray5001 => Color(0XFFF7FCFF);
  Color get gray700 => Color(0XFF646D6D);
  Color get gray80000 => Color(0X004B4B4B);
  Color get gray80046 => Color(0X463A3A3A);
  Color get gray900 => Color(0XFF1F1F1F);

  //Light
  Color get light => Color(0xFFF6F6F6);

  //Dark
  Color get darkerGrey => Color(0xFF4F4F4F);
  Color get darkGrey => Color(0xFF939393);
  Color get grey => Color(0xFFE0E0E0);
  Color get dark => Color(0xFF272727);

  // Grayd
  Color get gray8001d => Color(0X1D444444);
  Color get gray8002d => Color(0X2D404040);

  // Green
  Color get green60019 => Color(0X19359766);

}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();